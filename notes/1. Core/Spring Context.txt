Spring Context: The Core of Spring Framework
Spring Context is the container that manages the lifecycle and dependencies of beans in a Spring application. It is part of the Spring Core module and is responsible for:

‚úÖ Dependency Injection (DI) ‚Äì Automatically managing and injecting dependencies.
‚úÖ Bean Lifecycle Management ‚Äì Creating, configuring, and destroying beans.
‚úÖ Event Handling ‚Äì Publishing and listening for application events.
‚úÖ Internationalization (i18n) ‚Äì Handling messages and localization.
‚úÖ Resource Management ‚Äì Loading properties files, XML, and classpath resources.

 Key Components of Spring Context
1Ô∏è‚É£ ApplicationContext Interface (Most Common)
ApplicationContext is the central interface for accessing the Spring container. It extends BeanFactory (which manages beans) and provides additional features like event propagation and resource handling.

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class SpringContextExample {
    public static void main(String[] args) {
        ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
        MyBean myBean = context.getBean(MyBean.class);
        myBean.sayHello();
    }
}

Here, ApplicationContext loads the beans from AppConfig.class.

2Ô∏è‚É£ Types of ApplicationContext Implementations
Depending on your application type, you can use different implementations of ApplicationContext:

Implementation					Description
AnnotationConfigApplicationContext	Used for Java-based configuration (Spring Boot)
ClassPathXmlApplicationContext		Loads beans from an XML file
FileSystemXmlApplicationContext	Loads XML bean definitions from a file system path
WebApplicationContext				Specialized for web applications (Spring MVC)

3Ô∏è‚É£ ApplicationContext vs. BeanFactory
Feature					ApplicationContext					BeanFactory
Lazy Initialization	No, beans are initialized eagerly by default	 Yes, beans are created only when needed
Event Handling	‚úÖ Supports event publishing & listening	‚ùå No event mechanism
Internationalization	‚úÖ Supports i18n message sources      ‚ùå No built-in support
Resource Management	‚úÖ Can load files, properties, XML	‚ùå Very limited

Use ApplicationContext for real-world applications. BeanFactory is mainly used for lightweight applications where memory is critical.

4Ô∏è‚É£ Spring Context in Spring Boot
In Spring Boot, the ApplicationContext is automatically created when you run:

SpringApplication.run(MyApplication.class, args);

Spring Boot uses AnnotationConfigApplicationContext behind the scenes.

//Another:

üîπ Summary
Spring Context (ApplicationContext) is the heart of Spring.
It manages beans, handles DI, event propagation, and resource loading.
Spring Boot automatically initializes the Spring Context.
Use ApplicationContext, not BeanFactory, for production applications.


ApplicationContext  (Root Context)
   ‚îú‚îÄ‚îÄ Manages common beans (Services, Repositories)
   ‚îú‚îÄ‚îÄ Independent of Web
   ‚îî‚îÄ‚îÄ Parent of WebApplicationContext

       ‚Üì

WebApplicationContext (Child Context)
   ‚îú‚îÄ‚îÄ Inherits from ApplicationContext
   ‚îú‚îÄ‚îÄ Manages web-related beans (Controllers, ViewResolvers)
   ‚îú‚îÄ‚îÄ Has access to ServletContext
   ‚îî‚îÄ‚îÄ Used in Spring MVC

